I"˝I<h1 id="simitar-sniffing-modelling-and-traffic-generation"><a href="https://github.com/AndersonPaschoalon/Simitar">SIMITAR: SniffIng ModellIng and TrAffic geneRation</a></h1>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-large.jpg" width="200" title="This is a Scimitar, not a Simitar :P" />
</p>

<h2 id="1-introdution">1. Introdution</h2>

<p>SIMITAR stands for SIMITAR: SnIffing, ModellIng and TrAffic geneRation. SIMITAR is a tool for creating synthetic and realist network traffic. It uses actual netowork traffic (live captures or pcap files) for creating a flow-oriented traffic model. This model is used for creating network traffic, and is provided as parameter for the traffic generator. It is self-configurated because you dont have to care about adjusting stochastic parameters such as exponenetial rates, protocol, ports, or traffic rates as input parameters. It is all contained inside te traffic model created.</p>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-digram-project-cycle.png" width="400" />
</p>

<p>The traffic generator is not attached to a especific technology. It has a flow scheduler, which creates a thread for each flow. As traffic generator engine we can use from applications to low-level C/C++ lybraries. Currently we have extended it to <a href="http://libtins.github.io/">Libtins</a>(C++ packet frafter library) and <a href="https://iperf.fr/">Iperf</a>.</p>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-arch1.svg" width="400" />
</p>

<h2 id="2-quick-installation-guide">2. Quick installation Guide</h2>

<p>Clone this project directory:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/AndersonPaschoalon/ProjetoMestrado
</code></pre></div></div>
<p>Go to SIMITAR root directory:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Projeto/Mestrado/SIMITAR/
</code></pre></div></div>
<p>Run the <code class="language-plaintext highlighter-rouge">build.py</code> script. This is a script used to simplify the installarion of dependencies and build process. Type:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build.py --deps
</code></pre></div></div>
<p>Types <code class="language-plaintext highlighter-rouge">y/Yes</code> for any request of confimation. To build type:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build.py --clean
./build.py --build
</code></pre></div></div>
<p>These commands will ensure all required directories are created, and run <code class="language-plaintext highlighter-rouge">make clean</code> and <code class="language-plaintext highlighter-rouge">make</code> for each component in the right order. Link for all the binaries will be placed at <code class="language-plaintext highlighter-rouge">bin/</code>. This application use absoluthe paths for the files, so you may execute any executable from any place. These links and executables are equivalent:</p>

<table>
  <thead>
    <tr>
      <th>executable</th>
      <th>link</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>sniffer/sniffer-cli.py</td>
      <td>bin/simitar-sniffer</td>
    </tr>
    <tr>
      <td>trace-analyzer/trace-analyzer</td>
      <td>bin/simitar-trace-analyzer</td>
    </tr>
    <tr>
      <td>simitar-gen/simitar-gen</td>
      <td>bin/simitar-gen</td>
    </tr>
  </tbody>
</table>

<h2 id="3-components-and-apps">3. Components and apps</h2>

<p>SIMITAR is composed of 4 components:</p>

<ul>
  <li>Sniffer (<code class="language-plaintext highlighter-rouge">sniffer/sniffer-cli.py</code> or <code class="language-plaintext highlighter-rouge">bin/simitar-sniffer</code>) : Capture data from the pcap files or live captures.</li>
  <li>Database (<code class="language-plaintext highlighter-rouge">data/db/Trace.db</code>): local database for the capture traces.</li>
  <li>Trace Analyzer (<code class="language-plaintext highlighter-rouge">trace-analyzer/trace-analyzer</code> or <code class="language-plaintext highlighter-rouge">bin/trace-analyzer</code>):  creates the XML file (Compact Trace Descriptor) used by simitar-gen to create a synthetic traffic. The files are placed at the directory <code class="language-plaintext highlighter-rouge">/data/xml/</code>. Some pre-generated Compact Trace Descriptor files are already placed there.</li>
  <li>Traffic Generator (<code class="language-plaintext highlighter-rouge">simitar-gen/simitar-gen</code> or <code class="language-plaintext highlighter-rouge">bin/simitar-gen</code>): creates the sysnthetic traffic. A component diagram of the wole project is placed in the image below.</li>
</ul>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-architecture-diagram.png" width="400" />
</p>

<h2 id="4-basic-execution">4. Basic Execution</h2>

<p>Before executing any command, you must load the enviroment variables:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>data/config/simitar-workspace-config.sh
</code></pre></div></div>
<p>Sniffer works collecting information about an input traffic such as a pcap file
or a live traffic, and stores it in a sqlite3 database. It can be executed on
the directory <code class="language-plaintext highlighter-rouge">sniffer/</code>. Eg.:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./sniffer-cli.py new <span class="s2">"intrig-traffic"</span> live eth0 <span class="nt">--timeout</span> 15
</code></pre></div></div>
<p>This command will start and store a new capture trace on the local database. This capture will least for 15 seconds.  Ather this execution, use this command to show the capture information on the database:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./sniffer-cli.py list
</code></pre></div></div>
<p>Trace Analyzer creates a compact trace descriptor in XML file using a saved 
in the database. It salves the xml on the directory <code class="language-plaintext highlighter-rouge">data/xml/</code>. It can be 
executed on the directory <code class="language-plaintext highlighter-rouge">trace-analyzer/</code>. Eg.:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./trace-analyzer <span class="nt">--trace</span> <span class="s2">"intrig-traffic"</span>
</code></pre></div></div>
<p>The name passed in the <code class="language-plaintext highlighter-rouge">--trace</code> option must be the same as the one stored in the local database. Many others options are available(you may check tem typing <code class="language-plaintext highlighter-rouge">--help</code>) but none is mandatory. They may be used to control the parameters on the modelling process. After the execution, you may type on the root directory this command do check if the compact traffic trace was created:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls </span>data/xml/<span class="k">*</span> |grep <span class="s2">"intrig-traffic"</span>
</code></pre></div></div>
<p>It must show two files:  <code class="language-plaintext highlighter-rouge">intrig-traffic.sec.xml</code> and <code class="language-plaintext highlighter-rouge">intrig-traffic.ms.xml</code>. The first was parameterized using a time-scale of seconds, and the second of milliseconds. Some tools, like D-ITG use milliseconds as parameter input for its stochastic models.
The traffic generator simitar-gen is able to create traffic based on the model
created by the traffic generator. It can be executed on the directory 
simitar-gen/. To generate and receive the traffic, execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-E</span> ./simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> client <span class="nt">--ether</span> eth0 <span class="nt">--xml</span> ../data/xml/intrig-traffic.sec.xml <span class="nt">--dst-ip</span> 10.0.0.2
<span class="nb">sudo</span> <span class="nt">-E</span> ./simitar-gen <span class="nt">--tool</span> tins <span class="nt">--mode</span> client <span class="nt">--ether</span> eth0 <span class="nt">--xml</span> ../data/xml/intrig-traffic.sec.xml
<span class="nb">sudo</span> <span class="nt">-E</span> ./simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> server <span class="nt">--ether</span> eth0 <span class="nt">--xml</span> ../data/xml/intrig-traffic.sec.xml
</code></pre></div></div>
<p>Iperf and D-ITG  require the use of a client and a server, since it creates a 
connection before sending any packets. Others tools like tins, require
just the operation as a client, since since it crafts packets ‚Äúon the wire‚Äù. It is important the use of the <code class="language-plaintext highlighter-rouge">-E</code> option on <code class="language-plaintext highlighter-rouge">sudo</code> to export the enviroment variables.</p>

<h2 id="5-demos">5. Demos</h2>

<h3 id="51-5-minutes-or-less-demo-if-you-already-have-everything-installed">5.1. 5 minutes (or less) demo (if you already have everything installed)</h3>

<p>Open two terminals (we recomend <a href="https://gnometerminator.blogspot.com/p/introduction.html">terminator</a>). First, lets try <code class="language-plaintext highlighter-rouge">iperf</code> as packet generator engine. At SIMITAR root directory:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>data/config/simitar-workspace-config.sh
<span class="nb">sudo</span> <span class="nt">-E</span> ./bin/simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> server <span class="nt">--ether</span> lo  <span class="nt">--xml</span> data/xml/skype.sec.xml
</code></pre></div></div>
<p>Than, on another terminal, execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>data/config/simitar-workspace-config.sh
<span class="nb">sudo</span> <span class="nt">-E</span> ./bin/simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> client <span class="nt">--ether</span> lo  <span class="nt">--xml</span> data/xml/skype.sec.xml <span class="nt">--dst-ip</span> 127.0.0.1
</code></pre></div></div>
<p>To test Libtins as packet generator engine, just execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>data/config/simitar-workspace-config.sh
<span class="nb">sudo</span> <span class="nt">-E</span> ./bin/simitar-gen <span class="nt">--tool</span> tins <span class="nt">--mode</span> client <span class="nt">--ether</span> lo  <span class="nt">--xml</span> data/xml/skype.sec.xml <span class="nt">--dst-ip</span> 127.0.0.1
</code></pre></div></div>

<h3 id="52-opendaylight-topology-demo">5.2. OpenDayLight Topology Demo</h3>

<p>For running this demo, you must have installed the following tools installed:</p>
<ul>
  <li>Wireshark</li>
  <li>Mininet</li>
  <li>OpenDayLight (distribution-karaf-0.4.0-Beryllium)</li>
  <li>SIMITAR
We also recoment a XML visualizer, such as XML Tree Editor.</li>
</ul>

<h4 id="521-installing--and-running-opendaylight-beryllium">5.2.1. Installing  and running OpenDayLight (Beryllium)</h4>

<p>First, we procedute with the follow commans on the terminal</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt-get <span class="nb">install </span>maven git unzip
</code></pre></div></div>
<p>Than, you cd to the directory you want to install OpenDayLight, and execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://nexus.opendaylight.org/content/groups/public/org/opendaylight/integration/distribution-karaf/0.4.0-Beryllium/distribution-karaf-0.4.0-Beryllium.zip
unzip distribution-karaf-0.4.0-Beryllium.zip
<span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-1.8.0-openjdk-amd64
</code></pre></div></div>
<p>To run OpenDaylight, execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>distribution-karaf-0.4.0-Beryllium.zip
./bin/karaf
</code></pre></div></div>
<p>On the OpenDayLight terminal, execute</p>
<pre><code class="language-command">opendaylight-user@root&gt; feature:install odl-restconf odl-l2switch-switch odl-mdsal-apidocs odl-dlux-core
opendaylight-user@root&gt; feature:install odl-dlux-all odl-openflowplugin-flow-services-ui
opendaylight-user@root&gt; feature:install  odl-dlux-core odl-dlux-node odl-dlux-yangui odl-dlux-yangvisualizer
</code></pre>
<p>You may access the web interface of OpenDayLight using this link and login/passorwds on your browser:</p>
<pre><code class="language-command">http://localhost:8181/index.html
login: admin
password: admin
</code></pre>

<h4 id="522-running-and-visualizing-our-mininet-topology">5.2.2 Running and visualizing our Mininet topology:</h4>

<p>From SIMITAR root directory, run:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Tests/SimulationMininet/
</code></pre></div></div>
<p>First of all, clean up mininet:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mn <span class="nt">-c</span>
</code></pre></div></div>
<p>We first will build the simpler topology:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> ./simple-topo-test.py
</code></pre></div></div>
<p>From Mininet terminal, you have to tell OpenDayLight where are all switches:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mininet&gt; pingall
</code></pre></div></div>
<p align="center">
	<img src="./assets/img/posts/simitar/simitar-Screenshot1.png" width="700" />
</p>

<h4 id="523-finally-simitar">5.2.3 Finally, SIMITAR</h4>

<p>In the screenshot below you will see the topology we just build. To open a terminal for the host h1, type on mininet console:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mininet&gt; xterm h1 
</code></pre></div></div>
<p>On the h1 terminal, open Wireshark:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wireshark &amp;
</code></pre></div></div>
<p>and start scanning the interface <code class="language-plaintext highlighter-rouge">h1-eth0</code>. To run SIMITAR, execute:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source data/config/simitar-workspace-config.sh
 ./bin/simitar-gen --tool tins --mode client --ether h1-eth0 --xml ./data/xml/skype.sec.xml
</code></pre></div></div>
<p>If you go to the Wireshark window you just oppened, you will the the packets being generated, and how the bandwidth looks like over the time. Simitar will stop its execution once the whole traffic descripted by <code class="language-plaintext highlighter-rouge">skype.sec.xml</code> is executed.</p>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-Screenshot2.png" width="700" />
</p>
<p align="center">
	<img src="./assets/img/posts/simitar/simitar-Screenshot3.png" width="700" />
</p>

<p>Since the implementation of Libtins, specified by the option <code class="language-plaintext highlighter-rouge">--tool tins</code> works as a packet injector, there is no need for the use of a server-size instantiation of SIMITAR. But if you choose iperf as traffic generator tool, you will need it. This time we will build a funnier topology:</p>
<pre><code class="language-command"># @ Tests/SimulationMininet/
$ sudo mn -c
$ sudo ./simple-topo-test.py
# @ mininet terminal. IF it fails the first time, just try again
mininet&gt; pingall
</code></pre>
<p>On the OpenDayLight session you oppened on your favourite bronwnser, reload the page. You will find something like this:</p>

<p align="center">
	<img src="./assets/img/posts/simitar/simitar-Screenshot4.png" width="700" />
</p>

<p>Much cooler.</p>

<p>Now, on the mininet terminal, execute:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mininet&gt; xterm h1
mininet&gt; xterm h8
</code></pre></div></div>
<p>Run wireshark on both, and go to SIMITAR directory on both was well.  On the h8 terminal, run the server first:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># xterm h8</span>
<span class="nb">source </span>data/config/simitar-workspace-config.sh
 ./bin/simitar-gen <span class="nt">--tool</span> tins <span class="nt">--mode</span> server <span class="nt">--ether</span> h1-eth0 <span class="nt">--xml</span> ./data/xml/skype.sec.xml 
</code></pre></div></div>

<p>Iperf need to know the IP addr of the destination, to stablishes contact. Try both commans below (in two different runs). In the first, you will just pass a single Ip address of destinations. For the second, to run properly, you will need to execute the server-side command of simitar on all hosts, from 2 to 8. The argument is a CSV file, in the format <IPAddr>,MACAddr. For iperf, there is no need for the MAC address. The MACs on the file `data/csv/ip-addrs-list1.csv` are not actually used.</IPAddr></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># xterm h1</span>
<span class="nb">source </span>data/config/simitar-workspace-config.sh
 ./bin/simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> client <span class="nt">--ether</span> h1-eth0 <span class="nt">--xml</span> ./data/xml/skype.sec.xml  <span class="nt">--dst-ip</span> 10.0.08
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># xterm h1</span>
<span class="nb">source </span>data/config/simitar-workspace-config.sh
 ./bin/simitar-gen <span class="nt">--tool</span> iperf <span class="nt">--mode</span> client <span class="nt">--ether</span> h1-eth0 <span class="nt">--xml</span> ./data/xml/skype.sec.xml  <span class="nt">--dst-list-ip</span> ./data/csv/ip-addrs-list1.csv
</code></pre></div></div>
:ET