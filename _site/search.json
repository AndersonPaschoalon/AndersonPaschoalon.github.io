[
  
    {
      "title"       : "Dawn of the Silver Hands",
      "category"    : "",
      "tags"        : "Skyrim, Creation Kit, Papyrus, Game Development, Mod",
      "url"         : "./dsilhand.html",
      "date"        : "2022-07-01 03:00:00 -0300",
      "description" : "Skyrim mod -- Join the Silver Hand faction!",
      "content"     : "DSilHand"
    } ,
  
    {
      "title"       : "Quest Dialog Manager",
      "category"    : "",
      "tags"        : "Skyrim, Mod, Desktop, Python",
      "url"         : "./quest-dialog-manager.html",
      "date"        : "2022-06-01 03:00:00 -0300",
      "description" : "Computer Program Registration Certificate.",
      "content"     : "Quest Dialog ManagerCK QuestDialogManages is a tool to help manage your quest mod: Allows the conversion and generation of many audiofiles formats (wav, xwm, fuz) Allow you easily manage the audios from you mod: listento audios, manage file names,and check subtitles; Generate beautifull and comprehensive documentation; Reusable Comments and anotations for your documentation.Regenerate as many times you want with no loss."
    } ,
  
    {
      "title"       : "Swing Traffic Generator",
      "category"    : "",
      "tags"        : "Swing, Traffic Generator, Traffic Modelling, Wavelet",
      "url"         : "./swing.html",
      "date"        : "2022-05-27 03:00:00 -0300",
      "description" : "Swing - Realistic and Responsive Network Traffic Generation",
      "content"     : "Swingxficgenerator (v0.3.2)This is a re-upload for the Swing Traffic Generator. Its official homepage is located HERE.The swing traffic generator is a tool used in the publication Swing: Realistic and Responsive Network Traffic Generation. But the original source code has a compilation error, and I fixed it.I tried to contact the author some times by email, but with no response. If the author, or anyone related with the project find this repository, please, contact me.Since the Author Kashi Venkatesh Vishwanath allowed to redistribute the code, according to its LICENCE I decided publish it here, so anyone can use this tool.The original readme file, with a quick introduction, can be found here.If you use Swingxficgenerator in any work, please, cite the original paper. I also recomment the reading for a deeper undertanding of the tool. Plain Text K. V. Vishwanath and A. Vahdat, “Swing: Realistic and Responsive Network Traffic Generation,” in IEEE/ACM Transactions on Networking, vol. 17, no. 3, pp. 712-725, June 2009, doi: 10.1109/TNET.2009.2020830. BibTeX @ARTICLE{4914755, author={Vishwanath, Kashi Venkatesh and Vahdat, Amin}, journal={IEEE/ACM Transactions on Networking}, title={Swing: Realistic and Responsive Network Traffic Generation}, year={2009}, volume={17}, number={3}, pages={712-725}, doi={10.1109/TNET.2009.2020830}} I used this paper in my master thesis and on its paper, so I’m really greatefull for his work.My thesis can be found here:SIMITAR: synthetic and realistic network traffic generationAnd my article “Automated Selection of Inter-Packet Time Models Through Information Criteria” here: Plain Text A. d. S. Paschoalon and C. E. Rothenberg, “Automated Selection of Inter-Packet Time Models Through Information Criteria,” in IEEE Networking Letters, vol. 1, no. 2, pp. 56-59, June 2019, doi: 10.1109/LNET.2019.2905364. BibTeX @ARTICLE{8667676, author={Paschoalon, Anderson dos Santos and Rothenberg, Christian Esteve}, journal={IEEE Networking Letters}, title={Automated Selection of Inter-Packet Time Models Through Information Criteria}, year={2019}, volume={1}, number={2}, pages={56-59}, doi={10.1109/LNET.2019.2905364}}"
    } ,
  
    {
      "title"       : "Md2Html",
      "category"    : "",
      "tags"        : "Markdown, HTML, Bootstrap, Python",
      "url"         : "./md2Html.html",
      "date"        : "2022-05-27 03:00:00 -0300",
      "description" : "Md2Html",
      "content"     : "Md2HtmlJust a simple command line app to convert Markdown files to HTML.Usage: md2html --md &lt;markdown-file&gt; --title &lt;html-title&gt;Options: --md|-m &lt;markdown-file&gt;: path to markdown file --title|-t &lt;html-title&gt;: title to the HTML page titleExample:.\\\\Md2Html.exe --md SampleMarkdown.md --title \"HTML page title\""
    } ,
  
    {
      "title"       : "Spear",
      "category"    : "",
      "tags"        : "Skyrim, Mod, Desktop, CSharp",
      "url"         : "./moforgit.html",
      "date"        : "2022-01-25 03:00:00 -0300",
      "description" : "Mod organizer for Git Versioning",
      "content"     : "Spear: Mod Organizer for Git VersioningMoForGit is a tool that allows you create a Git repository using a Mod Organizer Tools. Allows you to manage different installations of Steam Game in the same Hard Disk; Transform the installation folder into a git repository, and gitignore all the game files – do file versioning of only your mod files."
    } ,
  
    {
      "title"       : "Mod Pack for Age of Mitology",
      "category"    : "",
      "tags"        : "Age of Mitology, Game Development, Mod",
      "url"         : "./mods-age-of-mitology.html",
      "date"        : "2021-08-27 03:00:00 -0300",
      "description" : "Pack of small mods for Age of Mitology",
      "content"     : "Mod Pack for Age of MitologySome small mods I developed for Age Of Mitology. Right now I have seven random maps, and one Campaing with five scenarios (in development).Random Maps Arabian Desert: A large desert with hidden treasures and bandit camps and scarse wood. Elysius Camps: A miraculous and brilliant land, with plenty of resources available, but you will have to fight for it. Guardians A: Each player starts with a Guardian in the Valley of the Kings. Guardians B: Each player starts with a Guardian in a Savanna megalopolis. One Settlement: All players start with one settlement and some small villages. But there are no other settlements available. Ragnarock: A Battle Royale among the gods in a nordic apocalyptic World. Sahara Desert: All resources are hard to be found in this map, especially wood."
    } ,
  
    {
      "title"       : "Tabletop RPG Soundtrack",
      "category"    : "",
      "tags"        : "RPG, Tabletop, Soundtrack",
      "url"         : "./tabletop.html",
      "date"        : "2021-08-01 03:00:00 -0300",
      "description" : "Tabletop RPG Soundtrack",
      "content"     : "Tabletop RPG Soundtrack"
    } ,
  
    {
      "title"       : "SIMITAR - SniffIng ModellIng and TrAffic geneRation",
      "category"    : "",
      "tags"        : "Simitar, Traffic Generation, Network Traffic Modelling",
      "url"         : "./simitar.html",
      "date"        : "2019-08-27 03:00:00 -0300",
      "description" : "SIMITAR - SniffIng ModellIng and TrAffic geneRation",
      "content"     : "SIMITAR: SniffIng ModellIng and TrAffic geneRation 1. IntrodutionSIMITAR stands for SIMITAR: SnIffing, ModellIng and TrAffic geneRation. SIMITAR is a tool for creating synthetic and realist network traffic. It uses actual netowork traffic (live captures or pcap files) for creating a flow-oriented traffic model. This model is used for creating network traffic, and is provided as parameter for the traffic generator. It is self-configurated because you dont have to care about adjusting stochastic parameters such as exponenetial rates, protocol, ports, or traffic rates as input parameters. It is all contained inside te traffic model created. The traffic generator is not attached to a especific technology. It has a flow scheduler, which creates a thread for each flow. As traffic generator engine we can use from applications to low-level C/C++ lybraries. Currently we have extended it to Libtins(C++ packet frafter library) and Iperf. 2. Quick installation GuideClone this project directory:git clone https://github.com/AndersonPaschoalon/ProjetoMestradoGo to SIMITAR root directory:cd Projeto/Mestrado/SIMITAR/Run the build.py script. This is a script used to simplify the installarion of dependencies and build process. Type:./build.py --depsTypes y/Yes for any request of confimation. To build type:./build.py --clean./build.py --buildThese commands will ensure all required directories are created, and run make clean and make for each component in the right order. Link for all the binaries will be placed at bin/. This application use absoluthe paths for the files, so you may execute any executable from any place. These links and executables are equivalent: executable link sniffer/sniffer-cli.py bin/simitar-sniffer trace-analyzer/trace-analyzer bin/simitar-trace-analyzer simitar-gen/simitar-gen bin/simitar-gen 3. Components and appsSIMITAR is composed of 4 components: Sniffer (sniffer/sniffer-cli.py or bin/simitar-sniffer) : Capture data from the pcap files or live captures. Database (data/db/Trace.db): local database for the capture traces. Trace Analyzer (trace-analyzer/trace-analyzer or bin/trace-analyzer): creates the XML file (Compact Trace Descriptor) used by simitar-gen to create a synthetic traffic. The files are placed at the directory /data/xml/. Some pre-generated Compact Trace Descriptor files are already placed there. Traffic Generator (simitar-gen/simitar-gen or bin/simitar-gen): creates the sysnthetic traffic. A component diagram of the wole project is placed in the image below. 4. Basic ExecutionBefore executing any command, you must load the enviroment variables:source data/config/simitar-workspace-config.shSniffer works collecting information about an input traffic such as a pcap fileor a live traffic, and stores it in a sqlite3 database. It can be executed onthe directory sniffer/. Eg.:./sniffer-cli.py new \"intrig-traffic\" live eth0 --timeout 15This command will start and store a new capture trace on the local database. This capture will least for 15 seconds. Ather this execution, use this command to show the capture information on the database:./sniffer-cli.py listTrace Analyzer creates a compact trace descriptor in XML file using a saved in the database. It salves the xml on the directory data/xml/. It can be executed on the directory trace-analyzer/. Eg.:./trace-analyzer --trace \"intrig-traffic\"The name passed in the --trace option must be the same as the one stored in the local database. Many others options are available(you may check tem typing --help) but none is mandatory. They may be used to control the parameters on the modelling process. After the execution, you may type on the root directory this command do check if the compact traffic trace was created:ls data/xml/* |grep \"intrig-traffic\"It must show two files: intrig-traffic.sec.xml and intrig-traffic.ms.xml. The first was parameterized using a time-scale of seconds, and the second of milliseconds. Some tools, like D-ITG use milliseconds as parameter input for its stochastic models.The traffic generator simitar-gen is able to create traffic based on the modelcreated by the traffic generator. It can be executed on the directory simitar-gen/. To generate and receive the traffic, execute:sudo -E ./simitar-gen --tool iperf --mode client --ether eth0 --xml ../data/xml/intrig-traffic.sec.xml --dst-ip 10.0.0.2sudo -E ./simitar-gen --tool tins --mode client --ether eth0 --xml ../data/xml/intrig-traffic.sec.xmlsudo -E ./simitar-gen --tool iperf --mode server --ether eth0 --xml ../data/xml/intrig-traffic.sec.xmlIperf and D-ITG require the use of a client and a server, since it creates a connection before sending any packets. Others tools like tins, requirejust the operation as a client, since since it crafts packets “on the wire”. It is important the use of the -E option on sudo to export the enviroment variables.5. Demos5.1. 5 minutes (or less) demo (if you already have everything installed)Open two terminals (we recomend terminator). First, lets try iperf as packet generator engine. At SIMITAR root directory:source data/config/simitar-workspace-config.shsudo -E ./bin/simitar-gen --tool iperf --mode server --ether lo --xml data/xml/skype.sec.xmlThan, on another terminal, execute:source data/config/simitar-workspace-config.shsudo -E ./bin/simitar-gen --tool iperf --mode client --ether lo --xml data/xml/skype.sec.xml --dst-ip 127.0.0.1To test Libtins as packet generator engine, just execute:source data/config/simitar-workspace-config.shsudo -E ./bin/simitar-gen --tool tins --mode client --ether lo --xml data/xml/skype.sec.xml --dst-ip 127.0.0.15.2. OpenDayLight Topology DemoFor running this demo, you must have installed the following tools installed: Wireshark Mininet OpenDayLight (distribution-karaf-0.4.0-Beryllium) SIMITARWe also recoment a XML visualizer, such as XML Tree Editor.5.2.1. Installing and running OpenDayLight (Beryllium)First, we procedute with the follow commans on the terminalapt-get updateapt-get install maven git unzipThan, you cd to the directory you want to install OpenDayLight, and execute:wget https://nexus.opendaylight.org/content/groups/public/org/opendaylight/integration/distribution-karaf/0.4.0-Beryllium/distribution-karaf-0.4.0-Beryllium.zipunzip distribution-karaf-0.4.0-Beryllium.zipexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64To run OpenDaylight, execute:cd distribution-karaf-0.4.0-Beryllium.zip./bin/karafOn the OpenDayLight terminal, executeopendaylight-user@root&gt; feature:install odl-restconf odl-l2switch-switch odl-mdsal-apidocs odl-dlux-coreopendaylight-user@root&gt; feature:install odl-dlux-all odl-openflowplugin-flow-services-uiopendaylight-user@root&gt; feature:install odl-dlux-core odl-dlux-node odl-dlux-yangui odl-dlux-yangvisualizerYou may access the web interface of OpenDayLight using this link and login/passorwds on your browser:http://localhost:8181/index.htmllogin: adminpassword: admin5.2.2 Running and visualizing our Mininet topology:From SIMITAR root directory, run:cd Tests/SimulationMininet/First of all, clean up mininet:sudo mn -cWe first will build the simpler topology:sudo ./simple-topo-test.pyFrom Mininet terminal, you have to tell OpenDayLight where are all switches:mininet&gt; pingall 5.2.3 Finally, SIMITARIn the screenshot below you will see the topology we just build. To open a terminal for the host h1, type on mininet console:mininet&gt; xterm h1 On the h1 terminal, open Wireshark:wireshark &amp;and start scanning the interface h1-eth0. To run SIMITAR, execute:source data/config/simitar-workspace-config.sh ./bin/simitar-gen --tool tins --mode client --ether h1-eth0 --xml ./data/xml/skype.sec.xmlIf you go to the Wireshark window you just oppened, you will the the packets being generated, and how the bandwidth looks like over the time. Simitar will stop its execution once the whole traffic descripted by skype.sec.xml is executed. Since the implementation of Libtins, specified by the option --tool tins works as a packet injector, there is no need for the use of a server-size instantiation of SIMITAR. But if you choose iperf as traffic generator tool, you will need it. This time we will build a funnier topology:# @ Tests/SimulationMininet/$ sudo mn -c$ sudo ./simple-topo-test.py# @ mininet terminal. IF it fails the first time, just try againmininet&gt; pingallOn the OpenDayLight session you oppened on your favourite bronwnser, reload the page. You will find something like this: Much cooler.Now, on the mininet terminal, execute:mininet&gt; xterm h1mininet&gt; xterm h8Run wireshark on both, and go to SIMITAR directory on both was well. On the h8 terminal, run the server first:# xterm h8source data/config/simitar-workspace-config.sh ./bin/simitar-gen --tool tins --mode server --ether h1-eth0 --xml ./data/xml/skype.sec.xml Iperf need to know the IP addr of the destination, to stablishes contact. Try both commans below (in two different runs). In the first, you will just pass a single Ip address of destinations. For the second, to run properly, you will need to execute the server-side command of simitar on all hosts, from 2 to 8. The argument is a CSV file, in the format ,MACAddr. For iperf, there is no need for the MAC address. The MACs on the file `data/csv/ip-addrs-list1.csv` are not actually used.# xterm h1source data/config/simitar-workspace-config.sh ./bin/simitar-gen --tool iperf --mode client --ether h1-eth0 --xml ./data/xml/skype.sec.xml --dst-ip 10.0.08# xterm h1source data/config/simitar-workspace-config.sh ./bin/simitar-gen --tool iperf --mode client --ether h1-eth0 --xml ./data/xml/skype.sec.xml --dst-list-ip ./data/csv/ip-addrs-list1.csv"
    } ,
  
    {
      "title"       : "SIMITAR - synthetic and realistic network traffic generation",
      "category"    : "",
      "tags"        : "Sniffing, Modelling, Traffic Generator, Flow, Libtins, D-ITG, Iperf",
      "url"         : "./simitar-thesis.html",
      "date"        : "2019-03-19 16:32:20 -0300",
      "description" : "todo.",
      "content"     : "SIMITAR: synthetic and realistic network traffic generationAbstract:Real network traffic has a different impact over network nodes if compared to constant traffic generated by tools like Iperf, even when they have the same average throughput. Busty traffic may cause buffers overflows while constant traffic does not, and can decrease the measurement accuracy. The number of flows may have an impact on flow-oriented nodes, such as SDN switches and controllers. In a scenario where software-defined networks will play an essential role in the future internet, a more in-depth validation of new technologies considering these aspects is crucial. Also, most of the open-source realistic traffic generator tools have the modeling layer coupled to the traffic generator, making a challenge update it to newer libraries and becoming them often outdated. Often most of the tools that support realistic traffic generation offer a broad set of options to be configured but are not auto-configurable. So the production of actual realistic traffic is a challenging project by itself. In this work, we are going to discuss in-depth this subject. As a final result for our research, we highlight two main contributions: a review on available solutions and network traffic modeling, and the propose of our traffic generator, called SIMITAR: SnIfing, ModellIng and TrAffic geneRation. This technology has a separated modeling framework from the traffic generator, being flow-oriented and auto-configurable. It creates and uses Compact Trace Descriptor files as inputs - XML files that describe traffic features for our traffic model. Currently, we may replicate with accuracy flow characteristics of all tested traffic, and the scaling features of some as well. We have given a particular focus on inter-packet times modeling, where we proposed a methodology based on information criteria for automating the process modeling and selection of the best model. We also proposed a cross-validation method to measure the methodology qualityResumo:Um tráfego de rede real possui um impacto diferente sobre os nós da rede se comparado ao tráfego constante gerado por ferramentas como Iperf, mesmo com uma mesma taxa de transferência. Um tráfego em rajadas pode causar estouros de buffers enquanto um tráfego constante não, e pode também diminuir a precisão das medições. O número de fluxos pode ter um impacto nos nós orientados a fluxo, como switches e controladores SDN. Em um cenário em que as redes definidas por software desempenharão um papel essencial na Internet futura, uma validação mais aprofundada das novas tecnologias, considerando esses aspectos, é crucial. Além disso, a maioria das ferramentas geradoras de tráfego realistas de código aberto tem a camada de modelagem acoplada ao gerador de pacotes, o que dificulta sua atualização para novas bibliotecas, tornando-as freqüentemente desatualizadas. Por fim, a maioria das ferramentas open-source que suportam a geração de tráfego realista, oferecem um grande conjunto de opções a serem configuradas, mas não são auto configuráveis. Dessa forma a produção de um tráfego realista customizado torna-se uma tarefa desafiadora. Neste trabalho nos aprofundamos neste assunto. Como resultado final, para nossa pesquisa destacamos duas contribuições principais: uma investigação de revisão das soluções disponíveis e modelagem de tráfego de rede, e a proposta de nosso próprio gerador de tráfego chamado SIMITAR (acrônimo para sniffing, modelagem e geração de tráfego em inglês). Esta tecnologia possui estruturas separadas de modelagem e geração de tráfego, sendo orientada a fluxos e auto configurável. Ela cria e usa Descritores de Tráfego Compactos como arquivos de entrada - Arquivos XML que descrevem características para o nosso modelo de tráfego. Atualmente já conseguimos replicar com precisão métricas do nível de fluxos, e certas características de escala. Demos um enfoque especial na modelagem de tempos entre pacotes, onde propomos uma metodologia baseada em critérios de informação para automatizar a modelagem de processos e seleção do melhor modelo. Também propusemos um método de validação para medir a qualidade deste mesmo métodoMaterial:DISSERTAÇÃO DIGITALIdioma:InglêsNúmero de chamada:T/UNICAMP P262sTítulo paralelo/equiv.:[SIMITAR]Publicação:Campinas, SP : [s.n.], 2019.Descrição física:1 recurso online (159 p.) : il., digital, arquivo PDF.Nota geral:Orientador: Christian Rodolfo Esteve RothenberNota de dissertação ou tese:Dissertação (mestrado) - Universidade Estadual de Campinas, Faculdade de Engenharia Elétrica e de ComputaçãoNota de sistema:Requisitos do sistema: Software para leitura de arquivo em PDFAssuntos:Redes de computadores Critério de informação de Akaike Transformada wavelet Internet Processo estocástico Gradiente descendenteAutoria:Paschoalon, Ánderson dos Santos, 1990- Esteve Rothenberg, Christian Rodolfo, 1982- ORIENTADOR Batista, Daniel Macêdo, 1979- AVALIADOR Lee, Luan Ling, 1956- AVALIADOR Universidade Estadual de Campinas. Faculdade de Engenharia Elétrica e de Computação. Programa de Pós-Graduação em Engenharia ElétricaSites:DOI: https://doi.org/10.47749/T/UNICAMP.2019.1090415Citação:@phdthesis{ simitar-thesis, author = \"Paschoalon, Anderson dos Santos \", title = \"SIMITAR: synthetic and realistic network traffic generation\", school = \"State University of Campinas, Faculty of Electrical Engineering and Computing\", year = \"2019\", type = \"Master Dissertation\", address = \"Campinas, SP\", month = \"March\", note = \"\\url{https://hdl.handle.net/20.500.12733/1636558}\",}PASCHOALON, Ánderson dos Santos. SIMITAR: synthetic and realistic network traffic generation = SIMITAR: geração de tráfego de rede sintético e realístico. 2019. 1 recurso online (159 p.) Dissertação (mestrado) - Universidade Estadual de Campinas, Faculdade de Engenharia Elétrica e de Computação, Campinas, SP. Disponível em: https://hdl.handle.net/20.500.12733/1636558. Acesso em: 13 jul. 2022."
    } ,
  
    {
      "title"       : "Automated Selection of Inter-Packet Time Models Through Information Criteria",
      "category"    : "",
      "tags"        : "Stochastic processes, Cost function, Measurement, Computational modeling, Fractals, Correlation, Data models, BIC, AIC, stochastic function, inter-packet times, Hurst exponent",
      "url"         : "./aic-bic.html",
      "date"        : "2019-03-15 03:00:00 -0300",
      "description" : "IEEE Networking Letters, Volume 1 Issue 2.",
      "content"     : "Automated Selection of Inter-Packet Time Models Through Information CriteriaAbstract: A well-known problem of network traffic representation over time is that there is no “one-fits-all” model. The selection of the “best” model is traditionally made in a time-consuming and ad-hoc manner by human experts. In this letter, we evaluate the feasibility of using Bayesian information criterion (BIC) and Akaike information criterion (AIC) as tools for automated selection of the best-fit stochastic process for inter-packet times. We propose and validate a methodology based on information criteria, resulting in an automated and accurate approach for such traffic modelling tasks.Published in: IEEE Networking Letters ( Volume: 1, Issue: 2, June 2019)Page(s): 56 - 59Date of Publication: 15 March 2019Electronic ISSN: 2576-3156INSPEC Accession Number: 18708377DOI: 10.1109/LNET.2019.2905364Publisher: IEEEBibTeX:@ARTICLE{ 8667676, author={Paschoalon, Anderson dos Santos and Rothenberg, Christian Esteve}, journal={IEEE Networking Letters}, title={Automated Selection of Inter-Packet Time Models Through Information Criteria}, year={2019}, volume={1}, number={2}, pages={56-59}, doi={10.1109/LNET.2019.2905364}}"
    } ,
  
    {
      "title"       : "Using BIC and AIC for Ethernet traffic model selection. Is it worth?",
      "category"    : "",
      "tags"        : "BIC, AIC, Network Traffic Modelling, Hurst exponent, heavy-tailed distribution",
      "url"         : "./aic-bic-first.html",
      "date"        : "2017-10-26 16:32:20 -0300",
      "description" : "We aim to evaluate how good are the information criteria AIC and BIC inferring which is the best stochastic process to describe Ethernet inter-packet times.",
      "content"     : "Using BIC and AIC for Ethernet traffic model selection. Is it worth?Abstract: In this work, we aim to evaluate how good are the information criteria AIC and BIC inferring whichis the best stochastic process to describe Ethernet inter-packet times. Also, we check if there is a practical differencebetween using AIC or BIC. We use a set of stochastic distributions to represent inter-packet of a traffic trace and calculate AIC and BIC. To test the quality of BIC and AIC guesses, we define a cost function based on the comparisonof significant stochastic properties for internet traffic modeling, such as correlation, fractal-level and mean. Then,we compare both results. In this short paper, we present just the results of a public free Skype-application packetcapture, but we provide as reference further analyzes on different traffic traces. We conclude that for most cases AICand BIC can guess right the best fitting according to the standards of Ethernet traffic modeling.Published in: IX DCA/FEEC/University of Campinas (UNICAMP) Workshop (EADCA)Date of Publication: 29 September 2016Publisher: Departament of Computing Enginiering and Automation (DCA) – UNICAMPBibTeX:@misc{artigo2274:online,author = {Anderson dos Santos Paschoalon , Christian Esteve Rothenberg},title = {Using BIC and AIC for Ethernet traffic model selection. Is it worth?},howpublished = {\\url{https://www.fee.unicamp.br/sites/default/files/departamentos/dca/eadca/eadcax/trabalhos/artigo_22_Using_BIC_AID_Ethernet_Traffic_Anderson_Prof_Christian.pdf}},month = {Octuber},year = {2017},note = {(Accessed on 07/13/2022)}}"
    } ,
  
    {
      "title"       : "Towards a Flexible and Extensible Framework for Realistic Traffic Generation on Emerging Networking Scenarios",
      "category"    : "",
      "tags"        : "BIC, AIC, Traffic Generation, Traffic Modelling, Fractal",
      "url"         : "./traff-gen.html",
      "date"        : "2016-09-29 16:32:20 -0300",
      "description" : "Model proposal for a flexible traffic generator.",
      "content"     : "Automated Selection of Inter-Packet Time Models Through Information CriteriaAbstract: New emerging technologies have a larger unpredictability, compared to legacy equipment. Theyrequire a larger set of meaningful tests on many different scenarios. But, in the open source world is hard to finda single tool able to provide realism, speed, easy usage and flexibility at the same time. Most of the tools aremonolithic and devoted to specific purposes. This work presents a flexible and extensible framework which aimsto decouple synthetic traffic modelling from its traffic generator engine. Through a new abstraction layer, it wouldbecome possible to use modern and throughput optimized tools to create realistic traffic, in an automated way. Thisenables a platform agnostic configuration and reproduction of complex scenarios via analytical models. Also we usepcap files and live-capture to create “Compact Trace Descriptors”.Published in: IX DCA/FEEC/University of Campinas (UNICAMP) Workshop (EADCA)Date of Publication: 29 September 2016Publisher: Departament of Computing Enginiering and Automation (DCA) – UNICAMPBibTeX:@misc{paschoal83:online,author = {Anderson dos Santos Paschoalon , Christian Esteve Rothenberg},title = {Towards a Flexible and Extensible Framework for Realistic Traffic Generation on Emerging Networking Scenarios},howpublished = {\\url{https://www.fee.unicamp.br/sites/default/files/departamentos/dca/eadca/eadcaix/artigos/paschoalon_rothenberg.pdf}},month = {September},year = {2016},note = {(Accessed on 07/13/2022)}}"
    } ,
  
    {
      "title"       : "MininetWifi Contribuition",
      "category"    : "",
      "tags"        : "SDN, Open Source, Contribution, C++",
      "url"         : "./mininet-wifi.html",
      "date"        : "2016-09-29 03:00:00 -0300",
      "description" : "MininetWifi",
      "content"     : "MininetWifi ContribuitionThis is a contrubution I made in 2016 for the testing and validation related with a MininetWifi publication.It is a simulation of File tranference implemented using the NS-3 Framework. The source code can be found here. About: Simulate the tranference of a file of 62.6 Mbytes trough two wifi stations. Topology: Wifi 10.1.1.0 * &lt;-2.72m-&gt; * &lt;-4.08m-&gt; * n0 AP n1 (source) (client)"
    } ,
  
    {
      "title"       : "(Portuguese) Smart Cities &amp; Big Data - Big Data Technologies as Enablers of the Cities of the Future - A top-down approach",
      "category"    : "",
      "tags"        : "Big Data, Smart Cities, machine learning, data mining, NoSQL, Hadoop, middleware, Civitas",
      "url"         : "./smartcity.html",
      "date"        : "2015-10-01 03:00:00 -0300",
      "description" : "",
      "content"     : "Cidades Inteligentes &amp; Big DataTecnologias de Big Data como habilitadoras das Cidades do Futuro - Uma abordagem top-downAbstract: This work aims to discuss the themes of smart cities and big data, inserted within the same context, and to show the numerous points at which they interrelate. It is discussed how big data technologies are a fundamental enabler so that smart cities can actually be implemented. Both concepts are formally introduced, with the concept of smart cities discussed being inserted within the architecture and technological map of the big data value chain. Finally, a practical example of implementing a big data infrastructure for a smart city is presented: CiDAP, in Santander, Spain.Resumo: Este trabalho tem por objetivo discutir os temas de cidades inteligentes e big dada, inseridos dentro do mesmo contexto, e mostrar os inúmeros pontos em que eles se interrelacionam. É discutido como as tecnologias de big data tratam-se se um habilitados fundamental para que cidades inteligentes possam ser de fato implantada. Ambos os conceitos são formalmente introduzidos, sendo o conceito de cidades inteligentes discutido inserido dentro da arquitetura e mapa tecnológico de cadeia de valor do big data. Por fim, é apresentado um exemplo prático de implementação de uma infraestrutura de big data de uma cidade inteligente: o CiDAP, em Santander, na Espanha."
    } ,
  
    {
      "title"       : "(Portuguese) SDN and NFV and SDN Technologies as an NFV Enabler",
      "category"    : "",
      "tags"        : "SDN, NFV, Middleboxes, CAPEX, OPEX, OpenFlow, OpenDayLight",
      "url"         : "./sdn-nfv.html",
      "date"        : "2015-06-01 03:00:00 -0300",
      "description" : "",
      "content"     : "Tecnologias SDN e NFV; e SDN como habilitadora de NFVAbstract: In recent years, the expansion of internet access has led to a true revolution in telecommunications. However, the very nature of the architecture of the internet has shown itself to be a bottleneck that prevents innovations in the medium. Thus, increases in operating capital expenditures, as well as increased network complexity are inevitable. In order to solve part of these problems, new technologies, SDN and NFV, appear. Although both are conceptually independent of each other, the set of common goals, as well as the possibility of adopting both together, ends up making them mutually collaborative. This work aims to present the concepts of SDN and NFV, as well as show their commonalities, and bring projects in which both technologies have been used collaboratively.Resumo: Nos últimos anos, a expansão do acesso a internet propiciou uma verdadeira revolução nas telecomunicações. No entanto, a própria natureza da arquitetura da internet vem se mostrando hoje um gargalo que impede inovações no meio. Dessa forma aumentos de gastos com capital operativos, bom como aumento da complexidade das redes são inevitáveis. Visando resolver parte desses problemas, surgem novas tecnologias, SDN e NFV. Apesar de ambas serem conceitualmente independentes entre si, o conjunto objetivos em comum, bem como a possibilidade de adoção de ambas em conjunto, acaba por torná-las mutuamente colaborativas. Este trabalho tem por objetivo apresentar os conceitos de SDN e NFV, bem como mostrar seus pontos em comum, e trazer projetos em que ambas as tecnologias vêm sendo usadas de maneira colaborativa."
    } ,
  
    {
      "title"       : "(Portuguese) Introduction to CL-AKA Protocols",
      "category"    : "",
      "tags"        : "CL-AKA, Public Key, Criptography without certificates",
      "url"         : "./claka.html",
      "date"        : "2015-05-01 03:00:00 -0300",
      "description" : "CL-AKA criptography protocols",
      "content"     : "Introdução aos protocolos CL-AKAAbstract: The use of digital certificates distributed by a Public Key Infrastructure (PKI) is the most widespread methodology in symmetric key agreement protocols. In this work, some alternative methodologies will be discussed, with a greater focus on CL-AKA protocols, ie, authenticated key agreement protocols without the use of certificates. The theoretical foundations, two protocol implementations, and some practical applications and proposals will be discussed.Resumo: A utilização de certificados digitais distribuídos por uma Infraestrutura de chaves públicas (PKI) é a metodologia mais difundida em protocolos de acordo de chave simétrica. Neste trabalho serão discutidas algumas metodologias alternativas, com um maior enfoque em protocolos CL-AKA, ou seja protocolos de acordo de chave autenticado sem uso de certificados. Serão discutidos os fundamentos teóricos, duas implementações de protocolos, e algumas aplicações e propostas pratias."
    } ,
  
    {
      "title"       : "(Portuguese) Review involving the feasibility of using NFV in conjunction with SDN on new generation ARM servers",
      "category"    : "",
      "tags"        : "NFV, SDN, Hipervisor, ARM, RISC",
      "url"         : "./nfv-arm.html",
      "date"        : "2014-09-01 03:00:00 -0300",
      "description" : "",
      "content"     : "Revisão envolvendo a viabilidade da utilização de NFV em conjunto com SDN sobre servidores ARM de nova geraçãoAbstract: This work reviews the feasibility of using NFV (Network Function Virtualization) and SDN (Software Defined Networks) technologies together on an ARM hardware platform. A theoretical introduction is made on the subject, a brief exposition of the architecture of NFV and SDN technologies, as well as a study of motivations, requirements and challenges, with a main focus on NFV. SDN here is mainly seen as a possibility that the use of these technologies together can more easily lead to the fulfillment of requirements. An analysis is made of some results involving virtualized network functions and networks defined by software, which show important conclusions, such as the dimension of the added overheads, and points where the technologies can be optimized. The feasibility of using ARM processors as NFV servers is also discussed, when analyzing several recent results involving computational and energy performance compared to other x86 architectures. The analysis of performance results of virtualization on this platform was also performed. Finally, a line of ARMv8 processors launched in 2014 is briefly presented, which has great potential with new network technologies.Resumo: Neste trabalho é feita uma revisão a respeito da viabilidade da utilização em conjunto das tecnologias NFV (Network Function Virtualization) e SDN(Software Defined Networks), sobre uma plataforma de hardware ARM. É feita uma introdução teórica sobre o assunto, uma exposição breve de como é a arquitetura das tecnologias NFV e SDN, bem como estudo das motivações, requisitos e desafios, com foco principal em NFV. SDN aqui é visto principalmente como uma possibilidade de que a utilização dessas tecnologias em conjunto, pode levar mais facilmente levar ao cumprimento de requisitos. É feita a análise de alguns resultados envolvendo funções de rede virtualizadas e redes definidas por softwares, que mostram conclusões importantes, como a dimensão dos overheads acrescentados, e pontos onde as tecnologias podem ser otimizadas. É também discutida a viabilidade da utilização de processadores ARM como servidores NFV, ao se analisarem diversos resultados recentes envolvendo desempenho computacional e energético dos mesmos comparados com outras arquiteturas x86. Foi também feita a análise de resultados de desempenho da virtualização sobre esta plataforma. Por fim é brevemente apresentado uma linha de processadores da arquitetura ARMv8 lançados em 2014, que tem grande potencial com novas tecnologias de rede."
    } ,
  
    {
      "title"       : "CPQD3036 - ETHERMONITOR - V.1.0",
      "category"    : "",
      "tags"        : "patent, Embedded Linux, LTE, 4G, CPQD",
      "url"         : "./pub-ethermonitor.html",
      "date"        : "2014-08-27 03:00:00 -0300",
      "description" : "Computer Program Registration Certificate.",
      "content"     : "CPQD3036 - ETHERMONITOR - V.1.0This is the register of computer program provided by INPI (Instituto Nacional da Propriedade Industrial – National Institute of Industrial Property) Ethermonitor, wich I developed at CPQD when I was an intern."
    } ,
  
    {
      "title"       : "CPQD3036 EtherMonitor",
      "category"    : "",
      "tags"        : "Embedded Linux, Networks, LTE, 4G, CPQD",
      "url"         : "./proj-ethermonitor.html",
      "date"        : "2014-08-27 03:00:00 -0300",
      "description" : "Embedded software for eternet interfaces management.",
      "content"     : "CPQD3036 EtherMonitor EtherMonitor is an application developed in C and implemented for an LTE radio base station, called eNodeB developed in the CPQD Foundation's LTE/4G project. eNodeB is the radio base station responsible for data transmission using LTE technology, used by internet providers to offer 4G services. Physically, the eNodeB has several ethernet network cables responsible for connecting it to the cloud. In the implementation developed by CPQD, at any given time, only one of them will be operational, and the other backup cables. If any of its interfaces fail, EtherMonitor is responsible for disabling this interface, and reconfiguring the next backup interface with all configurations and IPv4 address of the disconnected interface. In this way, EtherMonitor ensures that: eNodeB will lose cloud access and control only if all interfaces fail. For the cloud and the operator it is completely transparent that any hardware or software failure has occurred in one of the network interfaces, as the backup interface configuration is automatic. The operator may still be aware that any of the interfaces failed through the eNodeB command line interface, and may take the necessary measures. EtherMonitor must ensure that the correct information about the physical interface used is available."
    } 
  
]
